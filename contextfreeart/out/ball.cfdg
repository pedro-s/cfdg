// Original 3d grammar code is about 30 lines (commented at the end of this file)
// It has been generated by a preprocessor/translator that "modify" a CF 3d grammar in valid CFA v3 code.
// It has been a little modified by hand too.


// PIB

// DDQ            white flowers
// PYR DDP    semprevivo
// ITE              don't touch
// PYW           girls choice
// PIR ISL       pinacea
// DDM           baby pines



CF::Impure = 1
CF::AllowOverlap = 1

CF::Size = [s 680]


FDM = 0.1 // elemento minimo di default

sign(n) = (n>0) - (n<0)

CF::ColorDepth = 16
FDM = .3
CF::MinimumSize = .1
CF::ColorDepth = 8
CF::Background = [b -.8 sat .6 h -155]

startshape FD_begin // [STARTSHAPE] 


shape FD_begin {

// posizione (solo per spostamenti)

ox=0
oy=0
oz=0

pa=0
pb=0
pc=0

// inizializza assi
ax=1
ay=0
az=0
 
bx=0
by=1
bz=0
 
cx=0
cy=0
cz=1
     


// rotazioni iniziali assi a,b,c
ra=0
rb=0
rc=0
  
// scala iniziale assi a,b,c

sa=1
sb=1
sc=1




many(ox, oy, oz, ax, ay, az, bx,by,bz, cx,cy,cz, sa, sb, sc, 0, 0, 0, 0, -90, 0, 1, 1, 1)[sat 1   s  ( (abs(sa)>FDM) && (abs(sb)>FDM) && (abs(sc)>FDM) )  ] // richiamo di shape 


}

teta=360*(sqrt(5) -1) /2

shape  many(   
// sistema di riferimento

number ox, number oy, number oz,           // posizione origine

number ax, number ay, number az,           // rotazione assi di riferimento a (x) b (y) c (z)
number bx, number by, number bz,
number cx, number cy, number cz,

number sa, number sb, number sc,           // scalatura assi di riferimeto

// comandi

number pa, number pb, number pc,           // posizione
number ra, number rb, number rc,           // rotazione    ruota a, b, o c
number fa, number fb, number fc            // trasformazione (moltiplica:  scala e simmetrico)
)
rule {


bkox=ox
bkoy=oy
bkoz=oz

bksa=sa
bksb=sb
bksc=sc

bkax=ax
bkay=ay
bkaz=az

bkbx=bx
bkby=by
bkbz=bz

bkcx=cx
bkcy=cy
bkcz=cz




// Normalizing axixs to avoid error (a shape got too big)


va = sqrt(ax*ax + ay*ay + az*az)   
ax = ax/va
ay = ay/va
az = az/va
 
vb = sqrt(bx*bx + by*by + bz*bz)   
bx = bx/vb
by = by/vb
bz = bz/vb
 
vc = sqrt(cx*cx + cy*cy + cz*cz)   
cx = cx/vc
cy = cy/vc
cz = cz/vc





cos2=cos(ra/2)
sin2=sin(ra/2)  
 
qw=cos2
qx=ax*sin2  
qy=ay*sin2  
qz=az*sin2  
 
// rotate A axis
//----------------------------------------------------------
p1x=ax
p1y=ay
p1z=az
 
p2x = qw*qw*p1x    + 2*qy*qw*p1z  - 2*qz*qw*p1y   +
qx*qx*p1x     + 2*qy*qx*p1y    + 2*qz*qx*p1z   - qz*qz*p1x  
   - qy*qy*p1x   
p2y = 2*qx*qy*p1x  + qy*qy*p1y    + 2*qz*qy*p1z   +
2*qw*qz*p1x   - qz*qz*p1y      + qw*qw*p1y     - 2*qx*qw*p1z
   - qx*qx*p1y
p2z = 2*qx*qz*p1x  + 2*qy*qz*p1y  + qz*qz*p1z     -
2*qw*qy*p1x   - qy*qy*p1z      + 2*qw*qx*p1y   - qx*qx*p1z  
   + qw*qw*p1z
 
ax=p2x
ay=p2y
az=p2z
  
// rotate B axis
//--------------------------------------------------------------
p1x=bx
p1y=by
p1z=bz
 
p2x = qw*qw*p1x    + 2*qy*qw*p1z  - 2*qz*qw*p1y   +
qx*qx*p1x     + 2*qy*qx*p1y    + 2*qz*qx*p1z   - qz*qz*p1x  
   - qy*qy*p1x   
p2y = 2*qx*qy*p1x  + qy*qy*p1y    + 2*qz*qy*p1z   +
2*qw*qz*p1x   - qz*qz*p1y      + qw*qw*p1y     - 2*qx*qw*p1z
   - qx*qx*p1y
p2z = 2*qx*qz*p1x  + 2*qy*qz*p1y  + qz*qz*p1z     -
2*qw*qy*p1x   - qy*qy*p1z      + 2*qw*qx*p1y   - qx*qx*p1z  
   + qw*qw*p1z
 
bx=p2x
by=p2y
bz=p2z
 
// rotate C axis
//--------------------------------------------------------------
p1x=cx
p1y=cy
p1z=cz
 
p2x = qw*qw*p1x    + 2*qy*qw*p1z  - 2*qz*qw*p1y   +
qx*qx*p1x     + 2*qy*qx*p1y    + 2*qz*qx*p1z   - qz*qz*p1x  
   - qy*qy*p1x   
p2y = 2*qx*qy*p1x  + qy*qy*p1y    + 2*qz*qy*p1z   +
2*qw*qz*p1x   - qz*qz*p1y      + qw*qw*p1y     - 2*qx*qw*p1z
   - qx*qx*p1y
p2z = 2*qx*qz*p1x  + 2*qy*qz*p1y  + qz*qz*p1z     -
2*qw*qy*p1x   - qy*qy*p1z      + 2*qw*qx*p1y   - qx*qx*p1z  
   + qw*qw*p1z
 
cx=p2x
cy=p2y
cz=p2z


//-------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------
// rotate against axis  *B*


 
cos2=cos(rb/2)  
sin2=sin(rb/2)   
 
qw=cos2
qx=bx*sin2   
qy=by*sin2   
qz=bz*sin2   
  
// rotate A axis
//--------------------------------------------------------------
p1x=ax
p1y=ay
p1z=az
 
p2x = qw*qw*p1x    + 2*qy*qw*p1z  - 2*qz*qw*p1y   +
qx*qx*p1x     + 2*qy*qx*p1y    + 2*qz*qx*p1z   - qz*qz*p1x  
   - qy*qy*p1x   
p2y = 2*qx*qy*p1x  + qy*qy*p1y    + 2*qz*qy*p1z   +
2*qw*qz*p1x   - qz*qz*p1y      + qw*qw*p1y     - 2*qx*qw*p1z
   - qx*qx*p1y
p2z = 2*qx*qz*p1x  + 2*qy*qz*p1y  + qz*qz*p1z     -
2*qw*qy*p1x   - qy*qy*p1z      + 2*qw*qx*p1y   - qx*qx*p1z  
   + qw*qw*p1z
 
ax=p2x
ay=p2y
az=p2z
  
// rotate B axis
//--------------------------------------------------------------
p1x=bx
p1y=by
p1z=bz
 
p2x = qw*qw*p1x    + 2*qy*qw*p1z  - 2*qz*qw*p1y   +
qx*qx*p1x     + 2*qy*qx*p1y    + 2*qz*qx*p1z   - qz*qz*p1x  
   - qy*qy*p1x   
p2y = 2*qx*qy*p1x  + qy*qy*p1y    + 2*qz*qy*p1z   +
2*qw*qz*p1x   - qz*qz*p1y      + qw*qw*p1y     - 2*qx*qw*p1z
   - qx*qx*p1y
p2z = 2*qx*qz*p1x  + 2*qy*qz*p1y  + qz*qz*p1z     -
2*qw*qy*p1x   - qy*qy*p1z      + 2*qw*qx*p1y   - qx*qx*p1z  
   + qw*qw*p1z
 
bx=p2x
by=p2y
bz=p2z
  
// rotate C axis
//--------------------------------------------------------------
p1x=cx
p1y=cy
p1z=cz
 
p2x = qw*qw*p1x    + 2*qy*qw*p1z  - 2*qz*qw*p1y   +
qx*qx*p1x     + 2*qy*qx*p1y    + 2*qz*qx*p1z   - qz*qz*p1x  
   - qy*qy*p1x   
p2y = 2*qx*qy*p1x  + qy*qy*p1y    + 2*qz*qy*p1z   +
2*qw*qz*p1x   - qz*qz*p1y      + qw*qw*p1y     - 2*qx*qw*p1z
   - qx*qx*p1y
p2z = 2*qx*qz*p1x  + 2*qy*qz*p1y  + qz*qz*p1z     -
2*qw*qy*p1x   - qy*qy*p1z      + 2*qw*qx*p1y   - qx*qx*p1z  
   + qw*qw*p1z
 
cx=p2x
cy=p2y
cz=p2z


  
//-------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------
// rotate against axis  *C* 



cos2=cos(rc/2)
sin2=sin(rc/2) 
 
qw=cos2
qx=cx*sin2
qy=cy*sin2
qz=cz*sin2
 

// rotate A axis
//--------------------------------------------------------------
p1x=ax
p1y=ay
p1z=az
 
p2x = qw*qw*p1x    + 2*qy*qw*p1z  - 2*qz*qw*p1y   +
qx*qx*p1x     + 2*qy*qx*p1y    + 2*qz*qx*p1z   - qz*qz*p1x  
   - qy*qy*p1x   
p2y = 2*qx*qy*p1x  + qy*qy*p1y    + 2*qz*qy*p1z   +
2*qw*qz*p1x   - qz*qz*p1y      + qw*qw*p1y     - 2*qx*qw*p1z
   - qx*qx*p1y
p2z = 2*qx*qz*p1x  + 2*qy*qz*p1y  + qz*qz*p1z     -
2*qw*qy*p1x   - qy*qy*p1z      + 2*qw*qx*p1y   - qx*qx*p1z  
   + qw*qw*p1z
 
ax=p2x
ay=p2y
az=p2z
  
// rotate B axis
//--------------------------------------------------------------
p1x=bx
p1y=by
p1z=bz
 
p2x = qw*qw*p1x    + 2*qy*qw*p1z  - 2*qz*qw*p1y   +
qx*qx*p1x     + 2*qy*qx*p1y    + 2*qz*qx*p1z   - qz*qz*p1x  
   - qy*qy*p1x   
p2y = 2*qx*qy*p1x  + qy*qy*p1y    + 2*qz*qy*p1z   +
2*qw*qz*p1x   - qz*qz*p1y      + qw*qw*p1y     - 2*qx*qw*p1z
   - qx*qx*p1y
p2z = 2*qx*qz*p1x  + 2*qy*qz*p1y  + qz*qz*p1z     -
2*qw*qy*p1x   - qy*qy*p1z      + 2*qw*qx*p1y   - qx*qx*p1z  
   + qw*qw*p1z
 
bx=p2x
by=p2y
bz=p2z
  
// rotate C axis
//--------------------------------------------------------------
p1x=cx
p1y=cy
p1z=cz
 
p2x = qw*qw*p1x    + 2*qy*qw*p1z  - 2*qz*qw*p1y   +
qx*qx*p1x     + 2*qy*qx*p1y    + 2*qz*qx*p1z   - qz*qz*p1x  
   - qy*qy*p1x   
p2y = 2*qx*qy*p1x  + qy*qy*p1y    + 2*qz*qy*p1z   +
2*qw*qz*p1x   - qz*qz*p1y      + qw*qw*p1y     - 2*qx*qw*p1z
   - qx*qx*p1y
p2z = 2*qx*qz*p1x  + 2*qy*qz*p1y  + qz*qz*p1z     -
2*qw*qy*p1x   - qy*qy*p1z      + 2*qw*qx*p1y   - qx*qx*p1z  
   + qw*qw*p1z
 
cx=p2x
cy=p2y
cz=p2z 
//-------------------------------------------------------------------------------------------   








// nuove coordinate di Origine
ox = (pa*ax*sa + pb*bx*sb + pc*cx*sc)  + ox
oy = (pa*ay*sa + pb*by*sb + pc*cy*sc)  + oy
oz = (pa*az*sa + pb*bz*sb + pc*cz*sc)  + oz


// nuovi valori scala


ssa=sign(sa)
ssb=sign(sb)
ssc=sign(sc)

sa=sa*fa *ssa      // se FA � negativo SA � comunque positivo 
sb=sb*fb *ssa
sc=sc*fc *ssa

ax=ax*ssa         //  se necessario inverte i vettori  degli assi
ay=ay*ssa
az=az*ssa

bx=bx*ssa
by=by*ssa
bz=bz*ssa

cx=cx*ssa
cy=cy*ssa
cz=cz*ssa





loop 40[y 5] {
CIRCLE[y 200 s 4  6 a -.6]
CIRCLE[y 200 x .8 s 2 3  a -.6 b -1 sat -.5 a 1  h -160 a -.5]
}


CIRCLE [s 405 a -.2 b -.7 sat 1 h 180]
num=60
numquad=num^.5
loop i=60 [h -.3]{
ky=((i^.5) /numquad)

starter(ox, oy, oz, ax, ay, az, bx,by,bz, cx,cy,cz, sa, sb, sc, 0, 0, 0, i*teta, (90-ky*80), 0, 1, 1, 1)[b 1   s  ( (abs(sa)>FDM) && (abs(sb)>FDM) && (abs(sc)>FDM) )  ] // richiamo di shape 


}


}


shape  starter(   
// sistema di riferimento

number ox, number oy, number oz,           // posizione origine

number ax, number ay, number az,           // rotazione assi di riferimento a (x) b (y) c (z)
number bx, number by, number bz,
number cx, number cy, number cz,

number sa, number sb, number sc,           // scalatura assi di riferimeto

// comandi

number pa, number pb, number pc,           // posizione
number ra, number rb, number rc,           // rotazione    ruota a, b, o c
number fa, number fb, number fc            // trasformazione (moltiplica:  scala e simmetrico)
)
rule{


bkox=ox
bkoy=oy
bkoz=oz

bksa=sa
bksb=sb
bksc=sc

bkax=ax
bkay=ay
bkaz=az

bkbx=bx
bkby=by
bkbz=bz

bkcx=cx
bkcy=cy
bkcz=cz




// Normalizing axixs to avoid error (a shape got too big)


va = sqrt(ax*ax + ay*ay + az*az)   
ax = ax/va
ay = ay/va
az = az/va
 
vb = sqrt(bx*bx + by*by + bz*bz)   
bx = bx/vb
by = by/vb
bz = bz/vb
 
vc = sqrt(cx*cx + cy*cy + cz*cz)   
cx = cx/vc
cy = cy/vc
cz = cz/vc





cos2=cos(ra/2)
sin2=sin(ra/2)  
 
qw=cos2
qx=ax*sin2  
qy=ay*sin2  
qz=az*sin2  
 
// rotate A axis
//----------------------------------------------------------
p1x=ax
p1y=ay
p1z=az
 
p2x = qw*qw*p1x    + 2*qy*qw*p1z  - 2*qz*qw*p1y   +
qx*qx*p1x     + 2*qy*qx*p1y    + 2*qz*qx*p1z   - qz*qz*p1x  
   - qy*qy*p1x   
p2y = 2*qx*qy*p1x  + qy*qy*p1y    + 2*qz*qy*p1z   +
2*qw*qz*p1x   - qz*qz*p1y      + qw*qw*p1y     - 2*qx*qw*p1z
   - qx*qx*p1y
p2z = 2*qx*qz*p1x  + 2*qy*qz*p1y  + qz*qz*p1z     -
2*qw*qy*p1x   - qy*qy*p1z      + 2*qw*qx*p1y   - qx*qx*p1z  
   + qw*qw*p1z
 
ax=p2x
ay=p2y
az=p2z
  
// rotate B axis
//--------------------------------------------------------------
p1x=bx
p1y=by
p1z=bz
 
p2x = qw*qw*p1x    + 2*qy*qw*p1z  - 2*qz*qw*p1y   +
qx*qx*p1x     + 2*qy*qx*p1y    + 2*qz*qx*p1z   - qz*qz*p1x  
   - qy*qy*p1x   
p2y = 2*qx*qy*p1x  + qy*qy*p1y    + 2*qz*qy*p1z   +
2*qw*qz*p1x   - qz*qz*p1y      + qw*qw*p1y     - 2*qx*qw*p1z
   - qx*qx*p1y
p2z = 2*qx*qz*p1x  + 2*qy*qz*p1y  + qz*qz*p1z     -
2*qw*qy*p1x   - qy*qy*p1z      + 2*qw*qx*p1y   - qx*qx*p1z  
   + qw*qw*p1z
 
bx=p2x
by=p2y
bz=p2z
 
// rotate C axis
//--------------------------------------------------------------
p1x=cx
p1y=cy
p1z=cz
 
p2x = qw*qw*p1x    + 2*qy*qw*p1z  - 2*qz*qw*p1y   +
qx*qx*p1x     + 2*qy*qx*p1y    + 2*qz*qx*p1z   - qz*qz*p1x  
   - qy*qy*p1x   
p2y = 2*qx*qy*p1x  + qy*qy*p1y    + 2*qz*qy*p1z   +
2*qw*qz*p1x   - qz*qz*p1y      + qw*qw*p1y     - 2*qx*qw*p1z
   - qx*qx*p1y
p2z = 2*qx*qz*p1x  + 2*qy*qz*p1y  + qz*qz*p1z     -
2*qw*qy*p1x   - qy*qy*p1z      + 2*qw*qx*p1y   - qx*qx*p1z  
   + qw*qw*p1z
 
cx=p2x
cy=p2y
cz=p2z


//-------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------
// rotate against axis  *B*


 
cos2=cos(rb/2)  
sin2=sin(rb/2)   
 
qw=cos2
qx=bx*sin2   
qy=by*sin2   
qz=bz*sin2   
  
// rotate A axis
//--------------------------------------------------------------
p1x=ax
p1y=ay
p1z=az
 
p2x = qw*qw*p1x    + 2*qy*qw*p1z  - 2*qz*qw*p1y   +
qx*qx*p1x     + 2*qy*qx*p1y    + 2*qz*qx*p1z   - qz*qz*p1x  
   - qy*qy*p1x   
p2y = 2*qx*qy*p1x  + qy*qy*p1y    + 2*qz*qy*p1z   +
2*qw*qz*p1x   - qz*qz*p1y      + qw*qw*p1y     - 2*qx*qw*p1z
   - qx*qx*p1y
p2z = 2*qx*qz*p1x  + 2*qy*qz*p1y  + qz*qz*p1z     -
2*qw*qy*p1x   - qy*qy*p1z      + 2*qw*qx*p1y   - qx*qx*p1z  
   + qw*qw*p1z
 
ax=p2x
ay=p2y
az=p2z
  
// rotate B axis
//--------------------------------------------------------------
p1x=bx
p1y=by
p1z=bz
 
p2x = qw*qw*p1x    + 2*qy*qw*p1z  - 2*qz*qw*p1y   +
qx*qx*p1x     + 2*qy*qx*p1y    + 2*qz*qx*p1z   - qz*qz*p1x  
   - qy*qy*p1x   
p2y = 2*qx*qy*p1x  + qy*qy*p1y    + 2*qz*qy*p1z   +
2*qw*qz*p1x   - qz*qz*p1y      + qw*qw*p1y     - 2*qx*qw*p1z
   - qx*qx*p1y
p2z = 2*qx*qz*p1x  + 2*qy*qz*p1y  + qz*qz*p1z     -
2*qw*qy*p1x   - qy*qy*p1z      + 2*qw*qx*p1y   - qx*qx*p1z  
   + qw*qw*p1z
 
bx=p2x
by=p2y
bz=p2z
  
// rotate C axis
//--------------------------------------------------------------
p1x=cx
p1y=cy
p1z=cz
 
p2x = qw*qw*p1x    + 2*qy*qw*p1z  - 2*qz*qw*p1y   +
qx*qx*p1x     + 2*qy*qx*p1y    + 2*qz*qx*p1z   - qz*qz*p1x  
   - qy*qy*p1x   
p2y = 2*qx*qy*p1x  + qy*qy*p1y    + 2*qz*qy*p1z   +
2*qw*qz*p1x   - qz*qz*p1y      + qw*qw*p1y     - 2*qx*qw*p1z
   - qx*qx*p1y
p2z = 2*qx*qz*p1x  + 2*qy*qz*p1y  + qz*qz*p1z     -
2*qw*qy*p1x   - qy*qy*p1z      + 2*qw*qx*p1y   - qx*qx*p1z  
   + qw*qw*p1z
 
cx=p2x
cy=p2y
cz=p2z


  
//-------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------
// rotate against axis  *C* 



cos2=cos(rc/2)
sin2=sin(rc/2) 
 
qw=cos2
qx=cx*sin2
qy=cy*sin2
qz=cz*sin2
 

// rotate A axis
//--------------------------------------------------------------
p1x=ax
p1y=ay
p1z=az
 
p2x = qw*qw*p1x    + 2*qy*qw*p1z  - 2*qz*qw*p1y   +
qx*qx*p1x     + 2*qy*qx*p1y    + 2*qz*qx*p1z   - qz*qz*p1x  
   - qy*qy*p1x   
p2y = 2*qx*qy*p1x  + qy*qy*p1y    + 2*qz*qy*p1z   +
2*qw*qz*p1x   - qz*qz*p1y      + qw*qw*p1y     - 2*qx*qw*p1z
   - qx*qx*p1y
p2z = 2*qx*qz*p1x  + 2*qy*qz*p1y  + qz*qz*p1z     -
2*qw*qy*p1x   - qy*qy*p1z      + 2*qw*qx*p1y   - qx*qx*p1z  
   + qw*qw*p1z
 
ax=p2x
ay=p2y
az=p2z
  
// rotate B axis
//--------------------------------------------------------------
p1x=bx
p1y=by
p1z=bz
 
p2x = qw*qw*p1x    + 2*qy*qw*p1z  - 2*qz*qw*p1y   +
qx*qx*p1x     + 2*qy*qx*p1y    + 2*qz*qx*p1z   - qz*qz*p1x  
   - qy*qy*p1x   
p2y = 2*qx*qy*p1x  + qy*qy*p1y    + 2*qz*qy*p1z   +
2*qw*qz*p1x   - qz*qz*p1y      + qw*qw*p1y     - 2*qx*qw*p1z
   - qx*qx*p1y
p2z = 2*qx*qz*p1x  + 2*qy*qz*p1y  + qz*qz*p1z     -
2*qw*qy*p1x   - qy*qy*p1z      + 2*qw*qx*p1y   - qx*qx*p1z  
   + qw*qw*p1z
 
bx=p2x
by=p2y
bz=p2z
  
// rotate C axis
//--------------------------------------------------------------
p1x=cx
p1y=cy
p1z=cz
 
p2x = qw*qw*p1x    + 2*qy*qw*p1z  - 2*qz*qw*p1y   +
qx*qx*p1x     + 2*qy*qx*p1y    + 2*qz*qx*p1z   - qz*qz*p1x  
   - qy*qy*p1x   
p2y = 2*qx*qy*p1x  + qy*qy*p1y    + 2*qz*qy*p1z   +
2*qw*qz*p1x   - qz*qz*p1y      + qw*qw*p1y     - 2*qx*qw*p1z
   - qx*qx*p1y
p2z = 2*qx*qz*p1x  + 2*qy*qz*p1y  + qz*qz*p1z     -
2*qw*qy*p1x   - qy*qy*p1z      + 2*qw*qx*p1y   - qx*qx*p1z  
   + qw*qw*p1z
 
cx=p2x
cy=p2y
cz=p2z 
//-------------------------------------------------------------------------------------------   








// nuove coordinate di Origine
ox = (pa*ax*sa + pb*bx*sb + pc*cx*sc)  + ox
oy = (pa*ay*sa + pb*by*sb + pc*cy*sc)  + oy
oz = (pa*az*sa + pb*bz*sb + pc*cz*sc)  + oz


// nuovi valori scala


ssa=sign(sa)
ssb=sign(sb)
ssc=sign(sc)

sa=sa*fa *ssa      // se FA � negativo SA � comunque positivo 
sb=sb*fb *ssa
sc=sc*fc *ssa

ax=ax*ssa         //  se necessario inverte i vettori  degli assi
ay=ay*ssa
az=az*ssa

bx=bx*ssa
by=by*ssa
bz=bz*ssa

cx=cx*ssa
cy=cy*ssa
cz=cz*ssa






ssb=rand(.53,.67) ^2
ssz=195+35*ssb

hmed=rand_static(360)
hvar = rand_static(20)

hh1=hmed-hvar
hh2=hmed+hvar


flo(ox, oy, oz, ax, ay, az, bx,by,bz, cx,cy,cz, sa, sb, sc, 0, 0, ssz, 0, 0, 0, ssb, ssb, ssb)[h rand(hh1,hh2) sat rand_static(-1, 1)   s  ( (abs(sa)>FDM) && (abs(sb)>FDM) && (abs(sc)>FDM) )  ] // richiamo di shape 


grass(ox, oy, oz, ax, ay, az, bx,by,bz, cx,cy,cz, sa, sb, sc, 0, 0, ssz, 0, 0, 0, (20*ssb), (20*ssb), (20*ssb))[  s  ( (abs(sa)>FDM) && (abs(sb)>FDM) && (abs(sc)>FDM) )  ] // richiamo di shape 


}


shape  grass(   
// sistema di riferimento

number ox, number oy, number oz,           // posizione origine

number ax, number ay, number az,           // rotazione assi di riferimento a (x) b (y) c (z)
number bx, number by, number bz,
number cx, number cy, number cz,

number sa, number sb, number sc,           // scalatura assi di riferimeto

// comandi

number pa, number pb, number pc,           // posizione
number ra, number rb, number rc,           // rotazione    ruota a, b, o c
number fa, number fb, number fc            // trasformazione (moltiplica:  scala e simmetrico)
)
rule {


bkox=ox
bkoy=oy
bkoz=oz

bksa=sa
bksb=sb
bksc=sc

bkax=ax
bkay=ay
bkaz=az

bkbx=bx
bkby=by
bkbz=bz

bkcx=cx
bkcy=cy
bkcz=cz




// Normalizing axixs to avoid error (a shape got too big)


va = sqrt(ax*ax + ay*ay + az*az)   
ax = ax/va
ay = ay/va
az = az/va
 
vb = sqrt(bx*bx + by*by + bz*bz)   
bx = bx/vb
by = by/vb
bz = bz/vb
 
vc = sqrt(cx*cx + cy*cy + cz*cz)   
cx = cx/vc
cy = cy/vc
cz = cz/vc





cos2=cos(ra/2)
sin2=sin(ra/2)  
 
qw=cos2
qx=ax*sin2  
qy=ay*sin2  
qz=az*sin2  
 
// rotate A axis
//----------------------------------------------------------
p1x=ax
p1y=ay
p1z=az
 
p2x = qw*qw*p1x    + 2*qy*qw*p1z  - 2*qz*qw*p1y   +
qx*qx*p1x     + 2*qy*qx*p1y    + 2*qz*qx*p1z   - qz*qz*p1x  
   - qy*qy*p1x   
p2y = 2*qx*qy*p1x  + qy*qy*p1y    + 2*qz*qy*p1z   +
2*qw*qz*p1x   - qz*qz*p1y      + qw*qw*p1y     - 2*qx*qw*p1z
   - qx*qx*p1y
p2z = 2*qx*qz*p1x  + 2*qy*qz*p1y  + qz*qz*p1z     -
2*qw*qy*p1x   - qy*qy*p1z      + 2*qw*qx*p1y   - qx*qx*p1z  
   + qw*qw*p1z
 
ax=p2x
ay=p2y
az=p2z
  
// rotate B axis
//--------------------------------------------------------------
p1x=bx
p1y=by
p1z=bz
 
p2x = qw*qw*p1x    + 2*qy*qw*p1z  - 2*qz*qw*p1y   +
qx*qx*p1x     + 2*qy*qx*p1y    + 2*qz*qx*p1z   - qz*qz*p1x  
   - qy*qy*p1x   
p2y = 2*qx*qy*p1x  + qy*qy*p1y    + 2*qz*qy*p1z   +
2*qw*qz*p1x   - qz*qz*p1y      + qw*qw*p1y     - 2*qx*qw*p1z
   - qx*qx*p1y
p2z = 2*qx*qz*p1x  + 2*qy*qz*p1y  + qz*qz*p1z     -
2*qw*qy*p1x   - qy*qy*p1z      + 2*qw*qx*p1y   - qx*qx*p1z  
   + qw*qw*p1z
 
bx=p2x
by=p2y
bz=p2z
 
// rotate C axis
//--------------------------------------------------------------
p1x=cx
p1y=cy
p1z=cz
 
p2x = qw*qw*p1x    + 2*qy*qw*p1z  - 2*qz*qw*p1y   +
qx*qx*p1x     + 2*qy*qx*p1y    + 2*qz*qx*p1z   - qz*qz*p1x  
   - qy*qy*p1x   
p2y = 2*qx*qy*p1x  + qy*qy*p1y    + 2*qz*qy*p1z   +
2*qw*qz*p1x   - qz*qz*p1y      + qw*qw*p1y     - 2*qx*qw*p1z
   - qx*qx*p1y
p2z = 2*qx*qz*p1x  + 2*qy*qz*p1y  + qz*qz*p1z     -
2*qw*qy*p1x   - qy*qy*p1z      + 2*qw*qx*p1y   - qx*qx*p1z  
   + qw*qw*p1z
 
cx=p2x
cy=p2y
cz=p2z


//-------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------
// rotate against axis  *B*


 
cos2=cos(rb/2)  
sin2=sin(rb/2)   
 
qw=cos2
qx=bx*sin2   
qy=by*sin2   
qz=bz*sin2   
  
// rotate A axis
//--------------------------------------------------------------
p1x=ax
p1y=ay
p1z=az
 
p2x = qw*qw*p1x    + 2*qy*qw*p1z  - 2*qz*qw*p1y   +
qx*qx*p1x     + 2*qy*qx*p1y    + 2*qz*qx*p1z   - qz*qz*p1x  
   - qy*qy*p1x   
p2y = 2*qx*qy*p1x  + qy*qy*p1y    + 2*qz*qy*p1z   +
2*qw*qz*p1x   - qz*qz*p1y      + qw*qw*p1y     - 2*qx*qw*p1z
   - qx*qx*p1y
p2z = 2*qx*qz*p1x  + 2*qy*qz*p1y  + qz*qz*p1z     -
2*qw*qy*p1x   - qy*qy*p1z      + 2*qw*qx*p1y   - qx*qx*p1z  
   + qw*qw*p1z
 
ax=p2x
ay=p2y
az=p2z
  
// rotate B axis
//--------------------------------------------------------------
p1x=bx
p1y=by
p1z=bz
 
p2x = qw*qw*p1x    + 2*qy*qw*p1z  - 2*qz*qw*p1y   +
qx*qx*p1x     + 2*qy*qx*p1y    + 2*qz*qx*p1z   - qz*qz*p1x  
   - qy*qy*p1x   
p2y = 2*qx*qy*p1x  + qy*qy*p1y    + 2*qz*qy*p1z   +
2*qw*qz*p1x   - qz*qz*p1y      + qw*qw*p1y     - 2*qx*qw*p1z
   - qx*qx*p1y
p2z = 2*qx*qz*p1x  + 2*qy*qz*p1y  + qz*qz*p1z     -
2*qw*qy*p1x   - qy*qy*p1z      + 2*qw*qx*p1y   - qx*qx*p1z  
   + qw*qw*p1z
 
bx=p2x
by=p2y
bz=p2z
  
// rotate C axis
//--------------------------------------------------------------
p1x=cx
p1y=cy
p1z=cz
 
p2x = qw*qw*p1x    + 2*qy*qw*p1z  - 2*qz*qw*p1y   +
qx*qx*p1x     + 2*qy*qx*p1y    + 2*qz*qx*p1z   - qz*qz*p1x  
   - qy*qy*p1x   
p2y = 2*qx*qy*p1x  + qy*qy*p1y    + 2*qz*qy*p1z   +
2*qw*qz*p1x   - qz*qz*p1y      + qw*qw*p1y     - 2*qx*qw*p1z
   - qx*qx*p1y
p2z = 2*qx*qz*p1x  + 2*qy*qz*p1y  + qz*qz*p1z     -
2*qw*qy*p1x   - qy*qy*p1z      + 2*qw*qx*p1y   - qx*qx*p1z  
   + qw*qw*p1z
 
cx=p2x
cy=p2y
cz=p2z


  
//-------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------
// rotate against axis  *C* 



cos2=cos(rc/2)
sin2=sin(rc/2) 
 
qw=cos2
qx=cx*sin2
qy=cy*sin2
qz=cz*sin2
 

// rotate A axis
//--------------------------------------------------------------
p1x=ax
p1y=ay
p1z=az
 
p2x = qw*qw*p1x    + 2*qy*qw*p1z  - 2*qz*qw*p1y   +
qx*qx*p1x     + 2*qy*qx*p1y    + 2*qz*qx*p1z   - qz*qz*p1x  
   - qy*qy*p1x   
p2y = 2*qx*qy*p1x  + qy*qy*p1y    + 2*qz*qy*p1z   +
2*qw*qz*p1x   - qz*qz*p1y      + qw*qw*p1y     - 2*qx*qw*p1z
   - qx*qx*p1y
p2z = 2*qx*qz*p1x  + 2*qy*qz*p1y  + qz*qz*p1z     -
2*qw*qy*p1x   - qy*qy*p1z      + 2*qw*qx*p1y   - qx*qx*p1z  
   + qw*qw*p1z
 
ax=p2x
ay=p2y
az=p2z
  
// rotate B axis
//--------------------------------------------------------------
p1x=bx
p1y=by
p1z=bz
 
p2x = qw*qw*p1x    + 2*qy*qw*p1z  - 2*qz*qw*p1y   +
qx*qx*p1x     + 2*qy*qx*p1y    + 2*qz*qx*p1z   - qz*qz*p1x  
   - qy*qy*p1x   
p2y = 2*qx*qy*p1x  + qy*qy*p1y    + 2*qz*qy*p1z   +
2*qw*qz*p1x   - qz*qz*p1y      + qw*qw*p1y     - 2*qx*qw*p1z
   - qx*qx*p1y
p2z = 2*qx*qz*p1x  + 2*qy*qz*p1y  + qz*qz*p1z     -
2*qw*qy*p1x   - qy*qy*p1z      + 2*qw*qx*p1y   - qx*qx*p1z  
   + qw*qw*p1z
 
bx=p2x
by=p2y
bz=p2z
  
// rotate C axis
//--------------------------------------------------------------
p1x=cx
p1y=cy
p1z=cz
 
p2x = qw*qw*p1x    + 2*qy*qw*p1z  - 2*qz*qw*p1y   +
qx*qx*p1x     + 2*qy*qx*p1y    + 2*qz*qx*p1z   - qz*qz*p1x  
   - qy*qy*p1x   
p2y = 2*qx*qy*p1x  + qy*qy*p1y    + 2*qz*qy*p1z   +
2*qw*qz*p1x   - qz*qz*p1y      + qw*qw*p1y     - 2*qx*qw*p1z
   - qx*qx*p1y
p2z = 2*qx*qz*p1x  + 2*qy*qz*p1y  + qz*qz*p1z     -
2*qw*qy*p1x   - qy*qy*p1z      + 2*qw*qx*p1y   - qx*qx*p1z  
   + qw*qw*p1z
 
cx=p2x
cy=p2y
cz=p2z 
//-------------------------------------------------------------------------------------------   








// nuove coordinate di Origine
ox = (pa*ax*sa + pb*bx*sb + pc*cx*sc)  + ox
oy = (pa*ay*sa + pb*by*sb + pc*cy*sc)  + oy
oz = (pa*az*sa + pb*bz*sb + pc*cz*sc)  + oz


// nuovi valori scala


ssa=sign(sa)
ssb=sign(sb)
ssc=sign(sc)

sa=sa*fa *ssa      // se FA � negativo SA � comunque positivo 
sb=sb*fb *ssa
sc=sc*fc *ssa

ax=ax*ssa         //  se necessario inverte i vettori  degli assi
ay=ay*ssa
az=az*ssa

bx=bx*ssa
by=by*ssa
bz=bz*ssa

cx=cx*ssa
cy=cy*ssa
cz=cz*ssa






CIRCLE[s (sa*12.4) x (ox+10) y (oy-40) z (oz) a -.85 b -.85 sat -.4 h -160]

}


shape  flo(   
// sistema di riferimento

number ox, number oy, number oz,           // posizione origine

number ax, number ay, number az,           // rotazione assi di riferimento a (x) b (y) c (z)
number bx, number by, number bz,
number cx, number cy, number cz,

number sa, number sb, number sc,           // scalatura assi di riferimeto

// comandi

number pa, number pb, number pc,           // posizione
number ra, number rb, number rc,           // rotazione    ruota a, b, o c
number fa, number fb, number fc            // trasformazione (moltiplica:  scala e simmetrico)
)
rule {


bkox=ox
bkoy=oy
bkoz=oz

bksa=sa
bksb=sb
bksc=sc

bkax=ax
bkay=ay
bkaz=az

bkbx=bx
bkby=by
bkbz=bz

bkcx=cx
bkcy=cy
bkcz=cz




// Normalizing axixs to avoid error (a shape got too big)


va = sqrt(ax*ax + ay*ay + az*az)   
ax = ax/va
ay = ay/va
az = az/va
 
vb = sqrt(bx*bx + by*by + bz*bz)   
bx = bx/vb
by = by/vb
bz = bz/vb
 
vc = sqrt(cx*cx + cy*cy + cz*cz)   
cx = cx/vc
cy = cy/vc
cz = cz/vc





cos2=cos(ra/2)
sin2=sin(ra/2)  
 
qw=cos2
qx=ax*sin2  
qy=ay*sin2  
qz=az*sin2  
 
// rotate A axis
//----------------------------------------------------------
p1x=ax
p1y=ay
p1z=az
 
p2x = qw*qw*p1x    + 2*qy*qw*p1z  - 2*qz*qw*p1y   +
qx*qx*p1x     + 2*qy*qx*p1y    + 2*qz*qx*p1z   - qz*qz*p1x  
   - qy*qy*p1x   
p2y = 2*qx*qy*p1x  + qy*qy*p1y    + 2*qz*qy*p1z   +
2*qw*qz*p1x   - qz*qz*p1y      + qw*qw*p1y     - 2*qx*qw*p1z
   - qx*qx*p1y
p2z = 2*qx*qz*p1x  + 2*qy*qz*p1y  + qz*qz*p1z     -
2*qw*qy*p1x   - qy*qy*p1z      + 2*qw*qx*p1y   - qx*qx*p1z  
   + qw*qw*p1z
 
ax=p2x
ay=p2y
az=p2z
  
// rotate B axis
//--------------------------------------------------------------
p1x=bx
p1y=by
p1z=bz
 
p2x = qw*qw*p1x    + 2*qy*qw*p1z  - 2*qz*qw*p1y   +
qx*qx*p1x     + 2*qy*qx*p1y    + 2*qz*qx*p1z   - qz*qz*p1x  
   - qy*qy*p1x   
p2y = 2*qx*qy*p1x  + qy*qy*p1y    + 2*qz*qy*p1z   +
2*qw*qz*p1x   - qz*qz*p1y      + qw*qw*p1y     - 2*qx*qw*p1z
   - qx*qx*p1y
p2z = 2*qx*qz*p1x  + 2*qy*qz*p1y  + qz*qz*p1z     -
2*qw*qy*p1x   - qy*qy*p1z      + 2*qw*qx*p1y   - qx*qx*p1z  
   + qw*qw*p1z
 
bx=p2x
by=p2y
bz=p2z
 
// rotate C axis
//--------------------------------------------------------------
p1x=cx
p1y=cy
p1z=cz
 
p2x = qw*qw*p1x    + 2*qy*qw*p1z  - 2*qz*qw*p1y   +
qx*qx*p1x     + 2*qy*qx*p1y    + 2*qz*qx*p1z   - qz*qz*p1x  
   - qy*qy*p1x   
p2y = 2*qx*qy*p1x  + qy*qy*p1y    + 2*qz*qy*p1z   +
2*qw*qz*p1x   - qz*qz*p1y      + qw*qw*p1y     - 2*qx*qw*p1z
   - qx*qx*p1y
p2z = 2*qx*qz*p1x  + 2*qy*qz*p1y  + qz*qz*p1z     -
2*qw*qy*p1x   - qy*qy*p1z      + 2*qw*qx*p1y   - qx*qx*p1z  
   + qw*qw*p1z
 
cx=p2x
cy=p2y
cz=p2z


//-------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------
// rotate against axis  *B*


 
cos2=cos(rb/2)  
sin2=sin(rb/2)   
 
qw=cos2
qx=bx*sin2   
qy=by*sin2   
qz=bz*sin2   
  
// rotate A axis
//--------------------------------------------------------------
p1x=ax
p1y=ay
p1z=az
 
p2x = qw*qw*p1x    + 2*qy*qw*p1z  - 2*qz*qw*p1y   +
qx*qx*p1x     + 2*qy*qx*p1y    + 2*qz*qx*p1z   - qz*qz*p1x  
   - qy*qy*p1x   
p2y = 2*qx*qy*p1x  + qy*qy*p1y    + 2*qz*qy*p1z   +
2*qw*qz*p1x   - qz*qz*p1y      + qw*qw*p1y     - 2*qx*qw*p1z
   - qx*qx*p1y
p2z = 2*qx*qz*p1x  + 2*qy*qz*p1y  + qz*qz*p1z     -
2*qw*qy*p1x   - qy*qy*p1z      + 2*qw*qx*p1y   - qx*qx*p1z  
   + qw*qw*p1z
 
ax=p2x
ay=p2y
az=p2z
  
// rotate B axis
//--------------------------------------------------------------
p1x=bx
p1y=by
p1z=bz
 
p2x = qw*qw*p1x    + 2*qy*qw*p1z  - 2*qz*qw*p1y   +
qx*qx*p1x     + 2*qy*qx*p1y    + 2*qz*qx*p1z   - qz*qz*p1x  
   - qy*qy*p1x   
p2y = 2*qx*qy*p1x  + qy*qy*p1y    + 2*qz*qy*p1z   +
2*qw*qz*p1x   - qz*qz*p1y      + qw*qw*p1y     - 2*qx*qw*p1z
   - qx*qx*p1y
p2z = 2*qx*qz*p1x  + 2*qy*qz*p1y  + qz*qz*p1z     -
2*qw*qy*p1x   - qy*qy*p1z      + 2*qw*qx*p1y   - qx*qx*p1z  
   + qw*qw*p1z
 
bx=p2x
by=p2y
bz=p2z
  
// rotate C axis
//--------------------------------------------------------------
p1x=cx
p1y=cy
p1z=cz
 
p2x = qw*qw*p1x    + 2*qy*qw*p1z  - 2*qz*qw*p1y   +
qx*qx*p1x     + 2*qy*qx*p1y    + 2*qz*qx*p1z   - qz*qz*p1x  
   - qy*qy*p1x   
p2y = 2*qx*qy*p1x  + qy*qy*p1y    + 2*qz*qy*p1z   +
2*qw*qz*p1x   - qz*qz*p1y      + qw*qw*p1y     - 2*qx*qw*p1z
   - qx*qx*p1y
p2z = 2*qx*qz*p1x  + 2*qy*qz*p1y  + qz*qz*p1z     -
2*qw*qy*p1x   - qy*qy*p1z      + 2*qw*qx*p1y   - qx*qx*p1z  
   + qw*qw*p1z
 
cx=p2x
cy=p2y
cz=p2z


  
//-------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------
// rotate against axis  *C* 



cos2=cos(rc/2)
sin2=sin(rc/2) 
 
qw=cos2
qx=cx*sin2
qy=cy*sin2
qz=cz*sin2
 

// rotate A axis
//--------------------------------------------------------------
p1x=ax
p1y=ay
p1z=az
 
p2x = qw*qw*p1x    + 2*qy*qw*p1z  - 2*qz*qw*p1y   +
qx*qx*p1x     + 2*qy*qx*p1y    + 2*qz*qx*p1z   - qz*qz*p1x  
   - qy*qy*p1x   
p2y = 2*qx*qy*p1x  + qy*qy*p1y    + 2*qz*qy*p1z   +
2*qw*qz*p1x   - qz*qz*p1y      + qw*qw*p1y     - 2*qx*qw*p1z
   - qx*qx*p1y
p2z = 2*qx*qz*p1x  + 2*qy*qz*p1y  + qz*qz*p1z     -
2*qw*qy*p1x   - qy*qy*p1z      + 2*qw*qx*p1y   - qx*qx*p1z  
   + qw*qw*p1z
 
ax=p2x
ay=p2y
az=p2z
  
// rotate B axis
//--------------------------------------------------------------
p1x=bx
p1y=by
p1z=bz
 
p2x = qw*qw*p1x    + 2*qy*qw*p1z  - 2*qz*qw*p1y   +
qx*qx*p1x     + 2*qy*qx*p1y    + 2*qz*qx*p1z   - qz*qz*p1x  
   - qy*qy*p1x   
p2y = 2*qx*qy*p1x  + qy*qy*p1y    + 2*qz*qy*p1z   +
2*qw*qz*p1x   - qz*qz*p1y      + qw*qw*p1y     - 2*qx*qw*p1z
   - qx*qx*p1y
p2z = 2*qx*qz*p1x  + 2*qy*qz*p1y  + qz*qz*p1z     -
2*qw*qy*p1x   - qy*qy*p1z      + 2*qw*qx*p1y   - qx*qx*p1z  
   + qw*qw*p1z
 
bx=p2x
by=p2y
bz=p2z
  
// rotate C axis
//--------------------------------------------------------------
p1x=cx
p1y=cy
p1z=cz
 
p2x = qw*qw*p1x    + 2*qy*qw*p1z  - 2*qz*qw*p1y   +
qx*qx*p1x     + 2*qy*qx*p1y    + 2*qz*qx*p1z   - qz*qz*p1x  
   - qy*qy*p1x   
p2y = 2*qx*qy*p1x  + qy*qy*p1y    + 2*qz*qy*p1z   +
2*qw*qz*p1x   - qz*qz*p1y      + qw*qw*p1y     - 2*qx*qw*p1z
   - qx*qx*p1y
p2z = 2*qx*qz*p1x  + 2*qy*qz*p1y  + qz*qz*p1z     -
2*qw*qy*p1x   - qy*qy*p1z      + 2*qw*qx*p1y   - qx*qx*p1z  
   + qw*qw*p1z
 
cx=p2x
cy=p2y
cz=p2z 
//-------------------------------------------------------------------------------------------   








// nuove coordinate di Origine
ox = (pa*ax*sa + pb*bx*sb + pc*cx*sc)  + ox
oy = (pa*ay*sa + pb*by*sb + pc*cy*sc)  + oy
oz = (pa*az*sa + pb*bz*sb + pc*cz*sc)  + oz


// nuovi valori scala


ssa=sign(sa)
ssb=sign(sb)
ssc=sign(sc)

sa=sa*fa *ssa      // se FA � negativo SA � comunque positivo 
sb=sb*fb *ssa
sc=sc*fc *ssa

ax=ax*ssa         //  se necessario inverte i vettori  degli assi
ay=ay*ssa
az=az*ssa

bx=bx*ssa
by=by*ssa
bz=bz*ssa

cx=cx*ssa
cy=cy*ssa
cz=cz*ssa






subd=30
loop i=(1, subd) []{

tre(ox, oy, oz, ax, ay, az, bx,by,bz, cx,cy,cz, sa, sb, sc, 0, 0, 0, 0, 0, (teta*i/1+70), (subd-i), (subd-i), (subd-i) , i)[h (-10) sat -(.7*i/subd-.2) b -1   s  ( (abs(sa)>FDM) && (abs(sb)>FDM) && (abs(sc)>FDM) )  ] // richiamo di shape 


}


}


shape  tre(   
// sistema di riferimento

number ox, number oy, number oz,           // posizione origine

number ax, number ay, number az,           // rotazione assi di riferimento a (x) b (y) c (z)
number bx, number by, number bz,
number cx, number cy, number cz,

number sa, number sb, number sc,           // scalatura assi di riferimeto

// comandi

number pa, number pb, number pc,           // posizione
number ra, number rb, number rc,           // rotazione    ruota a, b, o c
number fa, number fb, number fc            // trasformazione (moltiplica:  scala e simmetrico)
 ,number q)
rule {


bkox=ox
bkoy=oy
bkoz=oz

bksa=sa
bksb=sb
bksc=sc

bkax=ax
bkay=ay
bkaz=az

bkbx=bx
bkby=by
bkbz=bz

bkcx=cx
bkcy=cy
bkcz=cz




// Normalizing axixs to avoid error (a shape got too big)


va = sqrt(ax*ax + ay*ay + az*az)   
ax = ax/va
ay = ay/va
az = az/va
 
vb = sqrt(bx*bx + by*by + bz*bz)   
bx = bx/vb
by = by/vb
bz = bz/vb
 
vc = sqrt(cx*cx + cy*cy + cz*cz)   
cx = cx/vc
cy = cy/vc
cz = cz/vc





cos2=cos(ra/2)
sin2=sin(ra/2)  
 
qw=cos2
qx=ax*sin2  
qy=ay*sin2  
qz=az*sin2  
 
// rotate A axis
//----------------------------------------------------------
p1x=ax
p1y=ay
p1z=az
 
p2x = qw*qw*p1x    + 2*qy*qw*p1z  - 2*qz*qw*p1y   +
qx*qx*p1x     + 2*qy*qx*p1y    + 2*qz*qx*p1z   - qz*qz*p1x  
   - qy*qy*p1x   
p2y = 2*qx*qy*p1x  + qy*qy*p1y    + 2*qz*qy*p1z   +
2*qw*qz*p1x   - qz*qz*p1y      + qw*qw*p1y     - 2*qx*qw*p1z
   - qx*qx*p1y
p2z = 2*qx*qz*p1x  + 2*qy*qz*p1y  + qz*qz*p1z     -
2*qw*qy*p1x   - qy*qy*p1z      + 2*qw*qx*p1y   - qx*qx*p1z  
   + qw*qw*p1z
 
ax=p2x
ay=p2y
az=p2z
  
// rotate B axis
//--------------------------------------------------------------
p1x=bx
p1y=by
p1z=bz
 
p2x = qw*qw*p1x    + 2*qy*qw*p1z  - 2*qz*qw*p1y   +
qx*qx*p1x     + 2*qy*qx*p1y    + 2*qz*qx*p1z   - qz*qz*p1x  
   - qy*qy*p1x   
p2y = 2*qx*qy*p1x  + qy*qy*p1y    + 2*qz*qy*p1z   +
2*qw*qz*p1x   - qz*qz*p1y      + qw*qw*p1y     - 2*qx*qw*p1z
   - qx*qx*p1y
p2z = 2*qx*qz*p1x  + 2*qy*qz*p1y  + qz*qz*p1z     -
2*qw*qy*p1x   - qy*qy*p1z      + 2*qw*qx*p1y   - qx*qx*p1z  
   + qw*qw*p1z
 
bx=p2x
by=p2y
bz=p2z
 
// rotate C axis
//--------------------------------------------------------------
p1x=cx
p1y=cy
p1z=cz
 
p2x = qw*qw*p1x    + 2*qy*qw*p1z  - 2*qz*qw*p1y   +
qx*qx*p1x     + 2*qy*qx*p1y    + 2*qz*qx*p1z   - qz*qz*p1x  
   - qy*qy*p1x   
p2y = 2*qx*qy*p1x  + qy*qy*p1y    + 2*qz*qy*p1z   +
2*qw*qz*p1x   - qz*qz*p1y      + qw*qw*p1y     - 2*qx*qw*p1z
   - qx*qx*p1y
p2z = 2*qx*qz*p1x  + 2*qy*qz*p1y  + qz*qz*p1z     -
2*qw*qy*p1x   - qy*qy*p1z      + 2*qw*qx*p1y   - qx*qx*p1z  
   + qw*qw*p1z
 
cx=p2x
cy=p2y
cz=p2z


//-------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------
// rotate against axis  *B*


 
cos2=cos(rb/2)  
sin2=sin(rb/2)   
 
qw=cos2
qx=bx*sin2   
qy=by*sin2   
qz=bz*sin2   
  
// rotate A axis
//--------------------------------------------------------------
p1x=ax
p1y=ay
p1z=az
 
p2x = qw*qw*p1x    + 2*qy*qw*p1z  - 2*qz*qw*p1y   +
qx*qx*p1x     + 2*qy*qx*p1y    + 2*qz*qx*p1z   - qz*qz*p1x  
   - qy*qy*p1x   
p2y = 2*qx*qy*p1x  + qy*qy*p1y    + 2*qz*qy*p1z   +
2*qw*qz*p1x   - qz*qz*p1y      + qw*qw*p1y     - 2*qx*qw*p1z
   - qx*qx*p1y
p2z = 2*qx*qz*p1x  + 2*qy*qz*p1y  + qz*qz*p1z     -
2*qw*qy*p1x   - qy*qy*p1z      + 2*qw*qx*p1y   - qx*qx*p1z  
   + qw*qw*p1z
 
ax=p2x
ay=p2y
az=p2z
  
// rotate B axis
//--------------------------------------------------------------
p1x=bx
p1y=by
p1z=bz
 
p2x = qw*qw*p1x    + 2*qy*qw*p1z  - 2*qz*qw*p1y   +
qx*qx*p1x     + 2*qy*qx*p1y    + 2*qz*qx*p1z   - qz*qz*p1x  
   - qy*qy*p1x   
p2y = 2*qx*qy*p1x  + qy*qy*p1y    + 2*qz*qy*p1z   +
2*qw*qz*p1x   - qz*qz*p1y      + qw*qw*p1y     - 2*qx*qw*p1z
   - qx*qx*p1y
p2z = 2*qx*qz*p1x  + 2*qy*qz*p1y  + qz*qz*p1z     -
2*qw*qy*p1x   - qy*qy*p1z      + 2*qw*qx*p1y   - qx*qx*p1z  
   + qw*qw*p1z
 
bx=p2x
by=p2y
bz=p2z
  
// rotate C axis
//--------------------------------------------------------------
p1x=cx
p1y=cy
p1z=cz
 
p2x = qw*qw*p1x    + 2*qy*qw*p1z  - 2*qz*qw*p1y   +
qx*qx*p1x     + 2*qy*qx*p1y    + 2*qz*qx*p1z   - qz*qz*p1x  
   - qy*qy*p1x   
p2y = 2*qx*qy*p1x  + qy*qy*p1y    + 2*qz*qy*p1z   +
2*qw*qz*p1x   - qz*qz*p1y      + qw*qw*p1y     - 2*qx*qw*p1z
   - qx*qx*p1y
p2z = 2*qx*qz*p1x  + 2*qy*qz*p1y  + qz*qz*p1z     -
2*qw*qy*p1x   - qy*qy*p1z      + 2*qw*qx*p1y   - qx*qx*p1z  
   + qw*qw*p1z
 
cx=p2x
cy=p2y
cz=p2z


  
//-------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------
// rotate against axis  *C* 



cos2=cos(rc/2)
sin2=sin(rc/2) 
 
qw=cos2
qx=cx*sin2
qy=cy*sin2
qz=cz*sin2
 

// rotate A axis
//--------------------------------------------------------------
p1x=ax
p1y=ay
p1z=az
 
p2x = qw*qw*p1x    + 2*qy*qw*p1z  - 2*qz*qw*p1y   +
qx*qx*p1x     + 2*qy*qx*p1y    + 2*qz*qx*p1z   - qz*qz*p1x  
   - qy*qy*p1x   
p2y = 2*qx*qy*p1x  + qy*qy*p1y    + 2*qz*qy*p1z   +
2*qw*qz*p1x   - qz*qz*p1y      + qw*qw*p1y     - 2*qx*qw*p1z
   - qx*qx*p1y
p2z = 2*qx*qz*p1x  + 2*qy*qz*p1y  + qz*qz*p1z     -
2*qw*qy*p1x   - qy*qy*p1z      + 2*qw*qx*p1y   - qx*qx*p1z  
   + qw*qw*p1z
 
ax=p2x
ay=p2y
az=p2z
  
// rotate B axis
//--------------------------------------------------------------
p1x=bx
p1y=by
p1z=bz
 
p2x = qw*qw*p1x    + 2*qy*qw*p1z  - 2*qz*qw*p1y   +
qx*qx*p1x     + 2*qy*qx*p1y    + 2*qz*qx*p1z   - qz*qz*p1x  
   - qy*qy*p1x   
p2y = 2*qx*qy*p1x  + qy*qy*p1y    + 2*qz*qy*p1z   +
2*qw*qz*p1x   - qz*qz*p1y      + qw*qw*p1y     - 2*qx*qw*p1z
   - qx*qx*p1y
p2z = 2*qx*qz*p1x  + 2*qy*qz*p1y  + qz*qz*p1z     -
2*qw*qy*p1x   - qy*qy*p1z      + 2*qw*qx*p1y   - qx*qx*p1z  
   + qw*qw*p1z
 
bx=p2x
by=p2y
bz=p2z
  
// rotate C axis
//--------------------------------------------------------------
p1x=cx
p1y=cy
p1z=cz
 
p2x = qw*qw*p1x    + 2*qy*qw*p1z  - 2*qz*qw*p1y   +
qx*qx*p1x     + 2*qy*qx*p1y    + 2*qz*qx*p1z   - qz*qz*p1x  
   - qy*qy*p1x   
p2y = 2*qx*qy*p1x  + qy*qy*p1y    + 2*qz*qy*p1z   +
2*qw*qz*p1x   - qz*qz*p1y      + qw*qw*p1y     - 2*qx*qw*p1z
   - qx*qx*p1y
p2z = 2*qx*qz*p1x  + 2*qy*qz*p1y  + qz*qz*p1z     -
2*qw*qy*p1x   - qy*qy*p1z      + 2*qw*qx*p1y   - qx*qx*p1z  
   + qw*qw*p1z
 
cx=p2x
cy=p2y
cz=p2z 
//-------------------------------------------------------------------------------------------   








// nuove coordinate di Origine
ox = (pa*ax*sa + pb*bx*sb + pc*cx*sc)  + ox
oy = (pa*ay*sa + pb*by*sb + pc*cy*sc)  + oy
oz = (pa*az*sa + pb*bz*sb + pc*cz*sc)  + oz


// nuovi valori scala


ssa=sign(sa)
ssb=sign(sb)
ssc=sign(sc)

sa=sa*fa *ssa      // se FA � negativo SA � comunque positivo 
sb=sb*fb *ssa
sc=sc*fc *ssa

ax=ax*ssa         //  se necessario inverte i vettori  degli assi
ay=ay*ssa
az=az*ssa

bx=bx*ssa
by=by*ssa
bz=bz*ssa

cx=cx*ssa
cy=cy*ssa
cz=cz*ssa





xscala=rand_static(.25,.99)
zscala=rand_static( xscala/2, xscala)

yscala=(rand_static(1.5,4)-q/90)

ANGO=(q^.45)-1
uno(ox, oy, oz, ax, ay, az, bx,by,bz, cx,cy,cz, sa, sb, sc, 0, (1-q/100), (q/10), (q*2-30), 0, 0, xscala, yscala,  zscala   , 0, ANGO )[a 1   s  ( (abs(sa)>FDM) && (abs(sb)>FDM) && (abs(sc)>FDM) )  ] // richiamo di shape 


}


shape  uno(   
// sistema di riferimento

number ox, number oy, number oz,           // posizione origine

number ax, number ay, number az,           // rotazione assi di riferimento a (x) b (y) c (z)
number bx, number by, number bz,
number cx, number cy, number cz,

number sa, number sb, number sc,           // scalatura assi di riferimeto

// comandi

number pa, number pb, number pc,           // posizione
number ra, number rb, number rc,           // rotazione    ruota a, b, o c
number fa, number fb, number fc            // trasformazione (moltiplica:  scala e simmetrico)
 ,number pen, number ANGO)
rule {


bkox=ox
bkoy=oy
bkoz=oz

bksa=sa
bksb=sb
bksc=sc

bkax=ax
bkay=ay
bkaz=az

bkbx=bx
bkby=by
bkbz=bz

bkcx=cx
bkcy=cy
bkcz=cz




// Normalizing axixs to avoid error (a shape got too big)


va = sqrt(ax*ax + ay*ay + az*az)   
ax = ax/va
ay = ay/va
az = az/va
 
vb = sqrt(bx*bx + by*by + bz*bz)   
bx = bx/vb
by = by/vb
bz = bz/vb
 
vc = sqrt(cx*cx + cy*cy + cz*cz)   
cx = cx/vc
cy = cy/vc
cz = cz/vc





cos2=cos(ra/2)
sin2=sin(ra/2)  
 
qw=cos2
qx=ax*sin2  
qy=ay*sin2  
qz=az*sin2  
 
// rotate A axis
//----------------------------------------------------------
p1x=ax
p1y=ay
p1z=az
 
p2x = qw*qw*p1x    + 2*qy*qw*p1z  - 2*qz*qw*p1y   +
qx*qx*p1x     + 2*qy*qx*p1y    + 2*qz*qx*p1z   - qz*qz*p1x  
   - qy*qy*p1x   
p2y = 2*qx*qy*p1x  + qy*qy*p1y    + 2*qz*qy*p1z   +
2*qw*qz*p1x   - qz*qz*p1y      + qw*qw*p1y     - 2*qx*qw*p1z
   - qx*qx*p1y
p2z = 2*qx*qz*p1x  + 2*qy*qz*p1y  + qz*qz*p1z     -
2*qw*qy*p1x   - qy*qy*p1z      + 2*qw*qx*p1y   - qx*qx*p1z  
   + qw*qw*p1z
 
ax=p2x
ay=p2y
az=p2z
  
// rotate B axis
//--------------------------------------------------------------
p1x=bx
p1y=by
p1z=bz
 
p2x = qw*qw*p1x    + 2*qy*qw*p1z  - 2*qz*qw*p1y   +
qx*qx*p1x     + 2*qy*qx*p1y    + 2*qz*qx*p1z   - qz*qz*p1x  
   - qy*qy*p1x   
p2y = 2*qx*qy*p1x  + qy*qy*p1y    + 2*qz*qy*p1z   +
2*qw*qz*p1x   - qz*qz*p1y      + qw*qw*p1y     - 2*qx*qw*p1z
   - qx*qx*p1y
p2z = 2*qx*qz*p1x  + 2*qy*qz*p1y  + qz*qz*p1z     -
2*qw*qy*p1x   - qy*qy*p1z      + 2*qw*qx*p1y   - qx*qx*p1z  
   + qw*qw*p1z
 
bx=p2x
by=p2y
bz=p2z
 
// rotate C axis
//--------------------------------------------------------------
p1x=cx
p1y=cy
p1z=cz
 
p2x = qw*qw*p1x    + 2*qy*qw*p1z  - 2*qz*qw*p1y   +
qx*qx*p1x     + 2*qy*qx*p1y    + 2*qz*qx*p1z   - qz*qz*p1x  
   - qy*qy*p1x   
p2y = 2*qx*qy*p1x  + qy*qy*p1y    + 2*qz*qy*p1z   +
2*qw*qz*p1x   - qz*qz*p1y      + qw*qw*p1y     - 2*qx*qw*p1z
   - qx*qx*p1y
p2z = 2*qx*qz*p1x  + 2*qy*qz*p1y  + qz*qz*p1z     -
2*qw*qy*p1x   - qy*qy*p1z      + 2*qw*qx*p1y   - qx*qx*p1z  
   + qw*qw*p1z
 
cx=p2x
cy=p2y
cz=p2z


//-------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------
// rotate against axis  *B*


 
cos2=cos(rb/2)  
sin2=sin(rb/2)   
 
qw=cos2
qx=bx*sin2   
qy=by*sin2   
qz=bz*sin2   
  
// rotate A axis
//--------------------------------------------------------------
p1x=ax
p1y=ay
p1z=az
 
p2x = qw*qw*p1x    + 2*qy*qw*p1z  - 2*qz*qw*p1y   +
qx*qx*p1x     + 2*qy*qx*p1y    + 2*qz*qx*p1z   - qz*qz*p1x  
   - qy*qy*p1x   
p2y = 2*qx*qy*p1x  + qy*qy*p1y    + 2*qz*qy*p1z   +
2*qw*qz*p1x   - qz*qz*p1y      + qw*qw*p1y     - 2*qx*qw*p1z
   - qx*qx*p1y
p2z = 2*qx*qz*p1x  + 2*qy*qz*p1y  + qz*qz*p1z     -
2*qw*qy*p1x   - qy*qy*p1z      + 2*qw*qx*p1y   - qx*qx*p1z  
   + qw*qw*p1z
 
ax=p2x
ay=p2y
az=p2z
  
// rotate B axis
//--------------------------------------------------------------
p1x=bx
p1y=by
p1z=bz
 
p2x = qw*qw*p1x    + 2*qy*qw*p1z  - 2*qz*qw*p1y   +
qx*qx*p1x     + 2*qy*qx*p1y    + 2*qz*qx*p1z   - qz*qz*p1x  
   - qy*qy*p1x   
p2y = 2*qx*qy*p1x  + qy*qy*p1y    + 2*qz*qy*p1z   +
2*qw*qz*p1x   - qz*qz*p1y      + qw*qw*p1y     - 2*qx*qw*p1z
   - qx*qx*p1y
p2z = 2*qx*qz*p1x  + 2*qy*qz*p1y  + qz*qz*p1z     -
2*qw*qy*p1x   - qy*qy*p1z      + 2*qw*qx*p1y   - qx*qx*p1z  
   + qw*qw*p1z
 
bx=p2x
by=p2y
bz=p2z
  
// rotate C axis
//--------------------------------------------------------------
p1x=cx
p1y=cy
p1z=cz
 
p2x = qw*qw*p1x    + 2*qy*qw*p1z  - 2*qz*qw*p1y   +
qx*qx*p1x     + 2*qy*qx*p1y    + 2*qz*qx*p1z   - qz*qz*p1x  
   - qy*qy*p1x   
p2y = 2*qx*qy*p1x  + qy*qy*p1y    + 2*qz*qy*p1z   +
2*qw*qz*p1x   - qz*qz*p1y      + qw*qw*p1y     - 2*qx*qw*p1z
   - qx*qx*p1y
p2z = 2*qx*qz*p1x  + 2*qy*qz*p1y  + qz*qz*p1z     -
2*qw*qy*p1x   - qy*qy*p1z      + 2*qw*qx*p1y   - qx*qx*p1z  
   + qw*qw*p1z
 
cx=p2x
cy=p2y
cz=p2z


  
//-------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------
// rotate against axis  *C* 



cos2=cos(rc/2)
sin2=sin(rc/2) 
 
qw=cos2
qx=cx*sin2
qy=cy*sin2
qz=cz*sin2
 

// rotate A axis
//--------------------------------------------------------------
p1x=ax
p1y=ay
p1z=az
 
p2x = qw*qw*p1x    + 2*qy*qw*p1z  - 2*qz*qw*p1y   +
qx*qx*p1x     + 2*qy*qx*p1y    + 2*qz*qx*p1z   - qz*qz*p1x  
   - qy*qy*p1x   
p2y = 2*qx*qy*p1x  + qy*qy*p1y    + 2*qz*qy*p1z   +
2*qw*qz*p1x   - qz*qz*p1y      + qw*qw*p1y     - 2*qx*qw*p1z
   - qx*qx*p1y
p2z = 2*qx*qz*p1x  + 2*qy*qz*p1y  + qz*qz*p1z     -
2*qw*qy*p1x   - qy*qy*p1z      + 2*qw*qx*p1y   - qx*qx*p1z  
   + qw*qw*p1z
 
ax=p2x
ay=p2y
az=p2z
  
// rotate B axis
//--------------------------------------------------------------
p1x=bx
p1y=by
p1z=bz
 
p2x = qw*qw*p1x    + 2*qy*qw*p1z  - 2*qz*qw*p1y   +
qx*qx*p1x     + 2*qy*qx*p1y    + 2*qz*qx*p1z   - qz*qz*p1x  
   - qy*qy*p1x   
p2y = 2*qx*qy*p1x  + qy*qy*p1y    + 2*qz*qy*p1z   +
2*qw*qz*p1x   - qz*qz*p1y      + qw*qw*p1y     - 2*qx*qw*p1z
   - qx*qx*p1y
p2z = 2*qx*qz*p1x  + 2*qy*qz*p1y  + qz*qz*p1z     -
2*qw*qy*p1x   - qy*qy*p1z      + 2*qw*qx*p1y   - qx*qx*p1z  
   + qw*qw*p1z
 
bx=p2x
by=p2y
bz=p2z
  
// rotate C axis
//--------------------------------------------------------------
p1x=cx
p1y=cy
p1z=cz
 
p2x = qw*qw*p1x    + 2*qy*qw*p1z  - 2*qz*qw*p1y   +
qx*qx*p1x     + 2*qy*qx*p1y    + 2*qz*qx*p1z   - qz*qz*p1x  
   - qy*qy*p1x   
p2y = 2*qx*qy*p1x  + qy*qy*p1y    + 2*qz*qy*p1z   +
2*qw*qz*p1x   - qz*qz*p1y      + qw*qw*p1y     - 2*qx*qw*p1z
   - qx*qx*p1y
p2z = 2*qx*qz*p1x  + 2*qy*qz*p1y  + qz*qz*p1z     -
2*qw*qy*p1x   - qy*qy*p1z      + 2*qw*qx*p1y   - qx*qx*p1z  
   + qw*qw*p1z
 
cx=p2x
cy=p2y
cz=p2z 
//-------------------------------------------------------------------------------------------   








// nuove coordinate di Origine
ox = (pa*ax*sa + pb*bx*sb + pc*cx*sc)  + ox
oy = (pa*ay*sa + pb*by*sb + pc*cy*sc)  + oy
oz = (pa*az*sa + pb*bz*sb + pc*cz*sc)  + oz


// nuovi valori scala


ssa=sign(sa)
ssb=sign(sb)
ssc=sign(sc)

sa=sa*fa *ssa      // se FA � negativo SA � comunque positivo 
sb=sb*fb *ssa
sc=sc*fc *ssa

ax=ax*ssa         //  se necessario inverte i vettori  degli assi
ay=ay*ssa
az=az*ssa

bx=bx*ssa
by=by*ssa
bz=bz*ssa

cx=cx*ssa
cy=cy*ssa
cz=cz*ssa






DDD_TUBOY(ox, oy, oz, ax, ay, az, bx, by, bz, cx, cy, cz, sa, sb, sc, bkox, bkoy, bkoz, bkax, bkay, bkaz, bkbx, bkby, bkbz, bkcx, bkcy, bkcz, bksa, bksb, bksc)[s pen ]

uno(ox, oy, oz, ax, ay, az, bx,by,bz, cx,cy,cz, sa, sb, sc, 0, .1, 0, ANGO, .001, 0, .94, .94, .94 , 1, ANGO)[h 6 b .06 sat -.17 a .08   s  ( (abs(sa)>FDM) && (abs(sb)>FDM) && (abs(sc)>FDM) )  ] // richiamo di shape 

CIRCLE[s (sa*2) x ox y oy z (oz-10) a -.98 b -1 ]

}


 


 shape DDD_TUBOY(
              ox, oy, oz, 
              ax, ay, az, 
              bx, by, bz, 
              cx, cy, cz, 
              sa, sb, sc, 
              bkox, bkoy, bkoz, 
              bkax, bkay, bkaz, 
              bkbx, bkby, bkbz, 
              bkcx, bkcy, bkcz, 
              bksa, bksb, bksc
              )
{
    newz=(oz + bkoz)/2
    
    zp=(( az*sa + cz*sc ) + ( bkaz*bksa + bkcz*bksc ))/4
    FACCIA( (ax*sa+ox),(ay*sa+oy), (cx*sc+ox), (cy*sc+oy),(bkcx*bksc+bkox),(bkcy*bksc+bkoy), (bkax*bksa+bkox),(bkay*bksa+bkoy) )[z (newz+zp) b .2 ]

    zp=(-( az*sa + cz*sc ) - ( bkaz*bksa + bkcz*bksc ))/4
    FACCIA( (-ax*sa+  ox),(-ay*sa + oy), (-cx*sc+ox), (-cy*sc+oy),(-bkcx*bksc + bkox),(-bkcy*bksc + bkoy), (-bkax*bksa + bkox),(-bkay*bksa + bkoy) )[z (newz+zp) b .2 ]
 
 
    zp=(-( -az*sa + cz*sc ) - ( -bkaz*bksa + bkcz*bksc ))/4
    FACCIA( (ax*sa+  ox),(ay*sa + oy), (-cx*sc+ox), (-cy*sc+oy),(-bkcx*bksc + bkox),(-bkcy*bksc + bkoy), (bkax*bksa + bkox),(bkay*bksa + bkoy) )[z (newz+zp) b -.1  ]

    zp=(( -az*sa + cz*sc ) + ( -bkaz*bksa + bkcz*bksc ))/4
    FACCIA( (-ax*sa+  ox),(-ay*sa + oy), (cx*sc+ox), (cy*sc+oy),(bkcx*bksc + bkox),(bkcy*bksc + bkoy), (-bkax*bksa + bkox),(-bkay*bksa + bkoy) )[z (newz+zp) b -.1 ]
        
}

 shape DDD_TUBOYMONO(
              ox, oy, oz, 
              ax, ay, az, 
              bx, by, bz, 
              cx, cy, cz, 
              sa, sb, sc, 
              bkox, bkoy, bkoz, 
              bkax, bkay, bkaz, 
              bkbx, bkby, bkbz, 
              bkcx, bkcy, bkcz, 
              bksa, bksb, bksc
              )
{
    newz=(oz + bkoz)/2
    
    zp=(( az*sa + cz*sc ) + ( bkaz*bksa + bkcz*bksc ))/4
    FACCIA( (ax*sa+ox),(ay*sa+oy), (cx*sc+ox), (cy*sc+oy),(bkcx*bksc+bkox),(bkcy*bksc+bkoy), (bkax*bksa+bkox),(bkay*bksa+bkoy) )[z (newz+zp) ]


    zp=(-( az*sa + cz*sc ) - ( bkaz*bksa + bkcz*bksc ))/4
    FACCIA( (-ax*sa+  ox),(-ay*sa + oy), (-cx*sc+ox), (-cy*sc+oy),(-bkcx*bksc + bkox),(-bkcy*bksc + bkoy), (-bkax*bksa + bkox),(-bkay*bksa + bkoy) )[z (newz+zp) ]
 
 
    zp=(-( -az*sa + cz*sc ) - ( -bkaz*bksa + bkcz*bksc ))/4
    FACCIA( (ax*sa+  ox),(ay*sa + oy), (-cx*sc+ox), (-cy*sc+oy),(-bkcx*bksc + bkox),(-bkcy*bksc + bkoy), (bkax*bksa + bkox),(bkay*bksa + bkoy) )[z (newz+zp) ]

    zp=(( -az*sa + cz*sc ) + ( -bkaz*bksa + bkcz*bksc ))/4
    FACCIA( (-ax*sa+  ox),(-ay*sa + oy), (cx*sc+ox), (cy*sc+oy),(bkcx*bksc + bkox),(bkcy*bksc + bkoy), (-bkax*bksa + bkox),(-bkay*bksa + bkoy) )[z (newz+zp) ]
        
}











path FACCIA (x1,y1,   x2,y2,   x3,y3,   x4,y4)
{
   MOVETO(x1, y1)
     LINETO(x2, y2)
     LINETO(x3, y3)
     LINETO(x4, y4)
     CLOSEPOLY() 
   FILL[]  
   STROKE(.03)[ a -.3]
}






//--------------------------------------------------
//--------------------------------------------------
// Original code:
//
/*
CF::ColorDepth = 8 
FDM = .27 
CF::MinimumSize = .1
CF::ColorDepth = 8 
CF::Background = [b -.85 sat .6 h -160]
startshape many[sat 1 ry -90]
teta=360*(sqrt(5) -1) /2
shape many 
rule {

CIRCLE [s 380 a -.2 b -.6 sat 1 h 180]

num=60 
numquad=num^.5
loop i=60 [h -.3]{
ky=((i^.5) /numquad) 
starter[b 1 rx i*teta ry (90-ky*80) ] 

}


}

shape starter 
rule{
ssb=rand(.53,.67) ^2
ssz=195+35*ssb
flo[z ssz s ssb h rand(70,150) sat -.5]
grass[z ssz s (20*ssb) ]

}

shape grass 
rule {
 CIRCLE[s (sa*12.4) x (ox+10) y (oy-40) z (oz) a -.85 b -.85 sat -.4 h -160]

}

shape flo 
rule {
subd=30 
loop i=(1, subd) []{
tre(i) [rz (teta*i/1+70) h (-10) ) s (subd-i) ) sat -(.7*i/subd-.2) b -1]

}


}

shape tre(number q) 
rule {
uno(0) [ y (1-q/100) rx (q*2-30) z (q/10) a 1 s .8 sy (2.9-q/90) ]

}

shape uno(number pen) 
rule {
 DDD_TUBOYMONO[s pen ]
 uno(1) [s .94 y .1 rx 2 ry .001 h 5 b .045 sat -.1 a .08]
 CIRCLE[s (sa*2) x ox y oy z (oz-10) a -.98 b -1 ]

}

*/
//
// Translator by Mycelium
//--------------------------------------------------
//--------------------------------------------------
